# Nombre de la aplicación
spring.application.name=backend

# ================================
# DATASOURCE (Configuración de la Base de Datos)
# ================================
# La URL apunta a 'db' porque ese será el nombre del servicio de la base de datos en Docker Compose
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# ================================
# JPA / HIBERNATE
# ================================
# 'update': Hibernate actualiza el schema de la BD, es ideal para desarrollo.
# 'create-drop': Crea las tablas al inicio y las borra al cerrar la aplicación (útil para pruebas).
spring.jpa.hibernate.ddl-auto=update 

# Mostrar en consola las sentencias SQL que se ejecutan (MUY ÚTIL para debuggear)
spring.jpa.show-sql=true

# Formatear las sentencias SQL para que sean más fáciles de leer
spring.jpa.properties.hibernate.format_sql=true

# Dialecto de PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ================================
# SERVER (Opcional)
# ================================
# Cambia el puerto si el 8080 está ocupado en tu máquina
server.port=8080


# ================================
# OKTA / OAUTH2
# ================================
# Configuración de Okta usando variables de entorno
# Mantener secrets fuera del código.
# okta.oauth2.issuer=${OKTA_ISSUER}
# okta.oauth2.client-id=${OKTA_CLIENT_ID}
# okta.oauth2.client-secret=${OKTA_CLIENT_SECRET}

# Configuración de Spring Security OAuth2 para Okta
# spring.security.oauth2.client.registration.okta.client-id=${OKTA_CLIENT_ID}
# spring.security.oauth2.client.registration.okta.client-secret=${OKTA_CLIENT_SECRET}
# spring.security.oauth2.client.provider.okta.issuer-uri=${OKTA_ISSUER}

# ================================
# SESIONES
# ================================
# Configura cookies SameSite para sesiones
# server.servlet.session.cookie.same-site=lax

# Tiempo de expiración de sesión
# server.servlet.session.timeout=30m

# ================================
# SPRING BEANS
# ================================
# Permite sobreescribir definiciones de beans
# Útil si se necesita redefinir un bean en tests o perfiles diferentes
# spring.main.allow-bean-definition-overriding=true
